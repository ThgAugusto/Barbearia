generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  OWNER
  BARBER
}

enum Status {
  ACTIVE
  INACTIVE
}

enum SchedulingStatus {
  SCHEDULED
  COMPLETED
  CANCELLED
}

model User {
  id               Int          @id @default(autoincrement())
  name             String       @db.VarChar(100)
  email            String       @unique @db.VarChar(255)
  password         String       @db.VarChar(255)
  role             Role
  barbershopId     Int?
  barbershopBarber Barbershop?  @relation("BarbershopBarbers", fields: [barbershopId], references: [id])
  barberScheduling Scheduling[]
  ownedBarbershops Barbershop[] @relation("BarbershopOwner")

  status Status @default(ACTIVE)

  @@index([role])
}

model Barbershop {
  id           Int          @id @default(autoincrement())
  socialReason String       @db.VarChar(255)
  tradeName    String?      @db.VarChar(255)
  cnpj         String       @unique @db.VarChar(18)
  address      String       @db.VarChar(255)
  phoneNumber  String       @db.VarChar(15)
  ownerId      Int
  owner        User         @relation("BarbershopOwner", fields: [ownerId], references: [id])
  barber       User[]       @relation("BarbershopBarbers")
  scheduling   Scheduling[]
  treatments   Treatment[]
  status       Status       @default(ACTIVE)

  @@index([socialReason])
  @@index([tradeName])
}

model Treatment {
  id           Int          @id @default(autoincrement())
  name         String       @unique @db.VarChar(100) 
  price        Decimal      @db.Money
  duration     Int
  description  String?      @db.Text
  status       Status       @default(ACTIVE)
  barbershopId Int
  barbershop   Barbershop   @relation(fields: [barbershopId], references: [id])
  schedulings  Scheduling[]
}

model Client {
  id          Int          @id @default(autoincrement())
  name        String       @db.VarChar(100)
  phone       String       @db.VarChar(15)
  email       String       @unique @db.VarChar(100)
  notes       String?
  schedulings Scheduling[]
  status      Status       @default(ACTIVE)
}

model Scheduling {
  id           Int              @id @default(autoincrement())
  dateTime     DateTime
  notes        String?          @db.Text
  barberId     Int
  barbershopId Int
  status       SchedulingStatus @default(SCHEDULED)
  barbershop   Barbershop       @relation(fields: [barbershopId], references: [id])
  barber       User             @relation(fields: [barberId], references: [id])
  treatmentId  Int
  treatment    Treatment        @relation(fields: [treatmentId], references: [id])
  clientId     Int
  client       Client           @relation(fields: [clientId], references: [id])

  @@index([barberId, dateTime])
  @@index([barbershopId, dateTime])
}
